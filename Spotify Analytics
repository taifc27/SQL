# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

# Creating the table: 

CREATE TABLE BIT_DB.Spotifydata 
(id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL)

# Then I inserted the Spotify Data .csv into the table.

# Next, I explored the data using the following SQL. 

# The avg popularity, danceability, and energy by artist and track. 
SELECT artist_name, track_name, avg(popularity), avg(danceability), avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name;

# Top 3 artist with more than 2 songs.
SELECT artist_name, COUNT(id)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING COUNT(id)>2
ORDER BY COUNT(id) DESC 
LIMIT 3;

# The artist who realeased the longest song and the track.
SELECT artist_name, MAX(duration_ms), track_name
FROM BIT_DB.Spotifydata;

# Top 10 artists according to the avg danceability.
SELECT AVG(danceability), artist_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY AVG(danceability) DESC 
LIMIT 10;

# And the top 5 artists ordered by the avg popularity.
SELECT artist_name, AVG(popularity)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY AVG(popularity) DESC 
LIMIT 5;
